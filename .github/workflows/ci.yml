name: CI pipeline

on: [ push, pull_request ]

jobs:
  validate-json:
    name: Validate JSON
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install jsonlint
        run: sudo apt install jsonlint
      - name: Validate JSON
        run: jsonlint-php data.json

  validate-js:
    name: Validate Javascript
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Validate Javascript
        run: node --check main.js

#  deploy:
#    name: Deploy
#    runs-on: ubuntu-latest
#    needs: [validate-json, validate-js]
#    if: github.ref == 'refs/heads/main'
#    steps:
#      - name: Unstash bundle
#        uses: actions/download-artifact@v2
#        with:
#          name: bundle
#          path: ./
#      - name: Install lftp
#        run: sudo apt install lftp
#      - name: Pull .well-known
#        continue-on-error: true
#        run: lftp -u ${{ secrets.FTP_USER }},${{ secrets.FTP_PASSWORD }} -e "set ssl:verify-certificate no; mirror ${{ secrets.FTP_SERVER_DIR }}/.well-known ./; quit;" ${{ secrets.FTP_URL }}
#      - name: Push new bundle to remote
#        run: lftp -u ${{ secrets.FTP_USER }},${{ secrets.FTP_PASSWORD }} -e "set ssl:verify-certificate no; mirror -R ./ ${{ secrets.FTP_SERVER_DIR }}-${{ github.sha }}; quit;" ${{ secrets.FTP_URL }}
#      - name: Remove old backup
#        continue-on-error: true
#        run: lftp -u ${{ secrets.FTP_USER }},${{ secrets.FTP_PASSWORD }} -e "set ssl:verify-certificate no; rm -r ${{ secrets.FTP_SERVER_DIR }}.bak; quit;" ${{ secrets.FTP_URL }}
#      - name: Backup current bundle and deploy new bundle
#        run: lftp -u ${{ secrets.FTP_USER }},${{ secrets.FTP_PASSWORD }} -e "set ssl:verify-certificate no; mv ${{ secrets.FTP_SERVER_DIR }} ${{ secrets.FTP_SERVER_DIR }}.bak; mv ${{ secrets.FTP_SERVER_DIR }}-${{ github.sha }} ${{ secrets.FTP_SERVER_DIR }}; quit;" ${{ secrets.FTP_URL }}
