name: CI pipeline

on: [ push, pull_request ]

jobs:
  validate-json:
    name: Validate JSON
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install dependencies
        run: |
          sudo apt-get install jsonlint
          sudo npm install -g ajv-cli
      - name: Validate JSON structure
        run: jsonlint-php src/assets/data.json
      - name: Validate JSON schema
        run: ajv validate -s data.schema.json -d src/assets/data.json --spec=draft2020

  unit:
    name: Unit tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install dependencies
        run: npm ci
      - name: Run frontend Unit tests
        run: npm run test

  e2e:
    name: E2E tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install dependencies
        run: npm ci
      - name: Run End to End tests
        run: npm run e2e
      - name: Upload videos
        uses: actions/upload-artifact@v2
        with:
          name: e2e-videos
          path: cypress/videos

  build:
    name: Build UI
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install dependencies
        run: npm ci
      - name: Build UI
        run: npm run build
      - name: Add .htaccess to bundle
        run: mv .htaccess dist/alioth/.htaccess
      - name: Stash bundle
        uses: actions/upload-artifact@v2
        with:
          name: bundle
          path: dist/alioth/

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [validate-json, unit, e2e, build]
    if: github.ref == 'refs/heads/master'
    steps:
      - name: Unstash bundle
        uses: actions/download-artifact@v2
        with:
          name: bundle
          path: ./
      - name: Install lftp
        run: sudo apt-get install lftp
      - name: Pull .well-known
        continue-on-error: true
        run: lftp -u ${{ secrets.FTP_USER }},${{ secrets.FTP_PASSWORD }} -e "set ssl:verify-certificate no; mirror ${{ secrets.FTP_SERVER_DIR }}/.well-known ./; quit;" ${{ secrets.FTP_URL }}
      - name: Push new bundle to remote
        run: lftp -u ${{ secrets.FTP_USER }},${{ secrets.FTP_PASSWORD }} -e "set ssl:verify-certificate no; mirror --reverse ./ ${{ secrets.FTP_SERVER_DIR }}-${{ github.sha }} --verbose --parallel=10; quit;" ${{ secrets.FTP_URL }}
      - name: Remove old backup
        continue-on-error: true
        run: lftp -u ${{ secrets.FTP_USER }},${{ secrets.FTP_PASSWORD }} -e "set ssl:verify-certificate no; rm -r ${{ secrets.FTP_SERVER_DIR }}.bak; quit;" ${{ secrets.FTP_URL }}
      - name: Backup current bundle and deploy new bundle
        run: lftp -u ${{ secrets.FTP_USER }},${{ secrets.FTP_PASSWORD }} -e "set ssl:verify-certificate no; mv ${{ secrets.FTP_SERVER_DIR }} ${{ secrets.FTP_SERVER_DIR }}.bak; mv ${{ secrets.FTP_SERVER_DIR }}-${{ github.sha }} ${{ secrets.FTP_SERVER_DIR }}; quit;" ${{ secrets.FTP_URL }}
